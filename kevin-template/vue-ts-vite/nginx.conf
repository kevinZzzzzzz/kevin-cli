# 全局配置
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 事件模块配置
events {
  use epoll; # 多路复用
  worker_connections 1024;
}

# HTTP模块配置
http {
  # MIME类型配置
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # 日志格式配置
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  # 访问日志配置
  access_log /var/log/nginx/access.log main;

  # Gzip压缩配置
  gzip on;
  gzip_comp_level 6;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;


  # 测试环境地址配置
  upstream pro_service
	{
		server xxx.xxx.xxx.xxx:xxxx;
	}
    
  # 服务器配置
  server {
      listen 89;
      server_name localhost;

      # 根目录配置
      root /usr/share/nginx/html;
      index index.html;

      # 其他路由配置
      location /api/ {
        proxy_pass http://pro_service/;
        proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号
        proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址
      }
      # location / {
      #     try_files $uri $uri/ /index.html;
      # }

      location / {
        # # 刷新缓存的配置
        # proxy_cache_purge my_cache $uri$is_args$args;
        # # # 启用缓存
        # proxy_cache my_cache ;
        # # 启用缓存验证（可选）
        # proxy_cache_revalidate on;
        # # 设置缓存的有效时间
        # proxy_cache_valid 200 302 10m;
        # proxy_cache_valid 404 1m;
        # # 设置不缓存的响应状态码
        # proxy_cache_valid any 0;
        error_page 404 = @purge_cache;
        try_files $uri $uri/ /index.html;
      }
      # 静态文件缓存配置
      location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1d;
      }

      location @purge_cache {
        # 绕过缓存
        proxy_cache_bypass 1;
        proxy_cache_revalidate on;
        proxy_cache_valid 200 10m;
        proxy_cache_valid 404 1s;
        return 404;
      }
  }
}
